import java.util.Scanner;

public class BaiTap1 {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.println("Nhập số phần tử của mảng:");
        int n = input.nextInt();
        if (n < 0) {
            System.out.println("Mảng lỗi");
        } else {
            int[] arr = fillArr(n, input);
            int choice;
            do {
                System.out.println("====> Chương trình thực hiện các chức năng sau:");
                System.out.println("1. Tính tổng các số dương trong mảng");
                System.out.println("2. Tính tổng các số lẻ trong mảng");
                System.out.println("3. Đếm có bn số dương");
                System.out.println("4. Tìm số nhỏ nhất trong mảng");
                System.out.println("5. Tìm số dương nhỏ nhất trong mảng");
                System.out.println("6. Tìm số chẵn cuối cùng trong mảng");
                System.out.println("7. Viết hàm tìm số chẵn đầu tiên");
                System.out.println("8. Tìm số nguyên tố đầu tiên");
                System.out.println("9. Tìm số dương cuối cùng trong mảng");
                System.out.println("10. Tìm giá trị chẵn nhỏ nhất ");
                System.out.println("0. Thoát chương trình");
                choice = input.nextInt();
                switch (choice) {
                    case 1:
                        int sumPos = sumPositiveNumb(arr);
                        System.out.println("Tổng các số dương trong mảng là:" + sumPos);
                        break;
                    case 2:
                        int sumOdd = sumOddNumb(arr);
                        System.out.println("Tổng các số lẻ trong mảng là" + sumOdd);
                        break;
                    case 3:
                        int count = countPositiveNumb(arr);
                        System.out.println("Mảng có " + count + " số dương");
                        break;
                    case 4:
                        int min = minValue(arr);
                        System.out.println("Giá trị nhỏ nhất trong mảng: " + min);
                        break;
                    case 5:
                        int min2 = minPositiveValue(arr);
                        System.out.println("Giá trị dương nhỏ nhất trong mảng: " + min2);
                        break;
                    case 6:
                        int lastEven = findLastEven(arr);
                        if (lastEven % 2 == 1) {
                            System.out.println("Mảng không có số chẵn");
                        } else {
                            System.out.println("Số chẵn cuối cùng trong mảng là: " + lastEven);
                        }
                        break;
                    case 7:
                        int firstEven = findFirstEven(arr);
                        if(firstEven < 0){
                            System.out.println("Mảng không có số chẵn");
                        } else {
                            System.out.println("Số chẵn đầu tiên trong mảng là: " + firstEven);
                        }
                        break;
                    case 8:
                        int firstPrime = findFirstPrime(arr);
                        if(firstPrime < 0){
                            System.out.println("Mảng không có số nguyên tố");
                        } else {
                            System.out.println("So nguyên tố đầu tiên trong mảng là: " + firstPrime);
                        }
                        break;
                    case 9:
                        int lastPos = findLastPositive(arr);
                        if(lastPos < 0){
                            System.out.println("Mảng không có số dương");
                        } else {
                            System.out.println("So dương cuối cùng của mảng là: " + lastPos);
                        }
                        break;
                    case 10:
                        int minEven = findMinEven(arr);
                        if(minEven % 2 == 1){
                            System.out.println("Array does not include even number");
                        } else {
                            System.out.println("The least even number in array is "  + minEven);
                        }
                        break;
                    case 0:
                        System.out.println("Chào tạm biệt");
                        break;
                    default:
                        System.out.println("Nhập giá trị từ 0 - 10");
                        break;

                }
            } while (choice != 0);
        }
    }

    public static int[] fillArr(int n, Scanner input) {
        int[] arr = new int[n];
        for (int i = 0; i < arr.length; i++) {
            System.out.println("Nhập vào phần tử thứ " + (i + 1) + " của mảng");
            arr[i] = input.nextInt();
        }
        return arr;
    }

    public static int sumPositiveNumb(int[] arr) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > 0) {
                sum += arr[i];
            }
        }
        return sum;
    }

    public static int sumOddNumb(int[] arr) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] % 2 == 1) {
                sum += arr[i];
            }
        }
        return sum;
    }

    public static int countPositiveNumb(int[] arr) {
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > 0) {
                count++;
            }
        }
        return count;
    }

    public static int minValue(int[] arr) {
        int min = arr[0];
        for (int i = 0; i < arr.length; i++) {
            min = (min < arr[i]) ? min : arr[i];
        }
        return min;
    }

    public static int minPositiveValue(int[] arr) {
        int min = 0;
        for (int i = 0; i  < arr.length; i++) {
            if (arr[i] > 0) {
                min = arr[i];
                break;
            } else {
                return -1;
            }
        }
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > 0 && arr[i] < min) {
                min = arr[i];
            }
        }
        return min;
    }

    public static int findLastEven(int[] arr) {
        for (int i = arr.length - 1; i >= 0; i--) {
            if (arr[i] % 2 == 0) {
                return arr[i];
            }
        }
        return -1;
    }

    public static int findFirstEven(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] % 2 == 0) {
                return arr[i];
            }
        }
        return -1;
    }

    public static int findFirstPrime(int[] arr){
        int count = 0;
        for (int i = 0; i < arr.length; i++){
            if(arr[i] <= 2){
                continue;
            } else {
                for (int j = 2; j < Math.sqrt(arr[i]); j++){
                    if (arr[i] % j == 0){
                        count++;
                    }
                }
            }
            if(count == 0){
                return arr[i];
            }
        }
        return -1;
    }

    public static int findLastPositive(int[] arr){
        for (int i = arr.length - 1; i >= 0; i--){
            if(arr[i] > 0){
                return arr[i];
            }
        }
        return -1;
    }

    public static int findMinEven(int[] arr){
        int min = Integer.MIN_VALUE;
        for (int i = 0; i < arr.length; i++){
            if(arr[i] % 2 == 0){
                min = arr[i];
                break;
            } else {
                return -1;
            }
        }
        for (int i = 0; i < arr.length; i++){
            if (arr[i] % 2 ==0){
                min = (min < arr[i]) ? min : arr[i];
            }
        }
        return min;
    }
}
